// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean      @default(false)
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  Deployment    Deployment[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

enum DeploymentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

// 기기 정보

model Device {
  id          String   @id @default(cuid())
  name        String
  deviceKey   String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  DeviceDeployment DeviceDeployment[]

  @@index([deviceKey])
}

model DeviceDeployment {
  id           String           @id @default(cuid())
  deviceId     String
  deploymentId String
  status       DeploymentStatus @default(PENDING)
  assignedAt   DateTime?
  errorMessage String?

  device     Device     @relation(fields: [deviceId], references: [id])
  deployment Deployment @relation(fields: [deploymentId], references: [id])

  @@index([deviceId, status])
  @@index([deploymentId, status])
  @@index([status, assignedAt])
}

model DockerImage {
  id           String   @id @default(cuid())
  deploymentId String?
  name         String
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tag          String
  hash         String   @unique

  DockerImageDeployment DockerImageDeployment[]

  @@index([name, tag])
  @@index([hash])
}

model DockerImageDeployment {
  dockerImageId String
  deploymentId  String
  assignedAt    DateTime @default(now())
  updatedAt     DateTime @updatedAt
  note          String?

  dockerImage DockerImage @relation(fields: [dockerImageId], references: [id])
  deployment  Deployment  @relation(fields: [deploymentId], references: [id])

  @@id([dockerImageId, deploymentId])
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String
  hash      String   @unique
  createdAt DateTime @default(now())

  FileDeployment FileDeployment[]

  @@index([name])
}

model FileDeployment {
  fileId       String
  deploymentId String

  file       File       @relation(fields: [fileId], references: [id])
  deployment Deployment @relation(fields: [deploymentId], references: [id])

  @@id([fileId, deploymentId])
}

model Deployment {
  id           String   @id @default(cuid())
  version      String   @unique
  description  String?
  isActive     Boolean  @default(false)
  appliedCount Int      @default(0)
  rollbackToId String?
  tags         String[]
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deployerId   String
  deployer     User     @relation(fields: [deployerId], references: [id])

  rollbackTo Deployment?  @relation("DeploymentRollback", fields: [rollbackToId], references: [id])
  rollbacks  Deployment[] @relation("DeploymentRollback")

  DockerImageDeployment DockerImageDeployment[]
  FileDeployment        FileDeployment[]
  DeviceDeployment      DeviceDeployment[]

  @@index([isActive, createdAt])
  @@index([deployerId, createdAt])
  @@index([version])
}
